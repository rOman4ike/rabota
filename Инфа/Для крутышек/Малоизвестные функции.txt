Примечание:
  Здесь расписаны только debounce/throttle
  Остальные функции просто знать что такие штуки есть
Статьи:
  Общие:
    1. https://vc.ru/u/1389654-machine-learning/615561-maloizvestnye-funkcii-javascript-kotorye-pozvolyat-uluchshit-kachestvo-vashego-koda
  debounce/throttle:
    1. https://javascript.plainenglish.io/debounce-and-throttle-unboxing-js-perf-495fb7c7c214
    2. https://maayansavir.medium.com/implement-debounce-in-javascript-ed1aa912fa47

1. -
  'debounce()' — это функция, которая «откладывает» вызов другой функции до того момента, когда с последнего вызова пройдёт
    определённое количество времени.

  Такую функцию используют, чтобы не бомбардировать сервер кучей запросов на каждый чих, а подождать, когда пользователь
    закончит или приостановит ввод, и только после этого отправить запрос на сервер.

  Когда используют:
    1. Форма поиска (SearchBar)
    2. Автозаполнение (Autocomplete)
    3. Автосохранение введенного пользователем текста
    4. Щелчок по кнопке, выполняющий вызовы API

  Как выглядит debounce:
    function debounce(func, delay) {
      let timeout;
      return function() {
        const context = this;
        const args = arguments;
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(context, args), delay);
      };
    }

2. -
  'throttle()' - функция, которая вызывает другую функцию, «пропуская» некоторые вызовы с определённой периодичностью.

  Когда используют:
    1. Обработка событий прокрутки: Когда пользователь прокручивает страницу, события прокрутки могут генерироваться
      очень часто, что может привести к излишней нагрузке на браузер.
      Пример:
        1. Бесконечная прокрутка (Infinite scrolling)
    2. Обработка событий изменения размера окна
    3. spam-clicking - Мы можем применить его и к кнопкам в веб-приложении. Обратный вызов слушателя события click будет
      выполняться только после того, как пройдет определенное время с момента последнего вызова.
      Это позволит уменьшить количество спам-кликерства со стороны пользователя.

  Как выглядит throttle():
    function throttle(func, delay) {
      let wait = false;

      return (...args) => {
        if (wait) {
            return;
        }

        func(...args);
        wait = true;
        setTimeout(() => {
          wait = false;
        }, delay);
      }
    }

В общем про debounce/throttle
  debounce/throttle может повысить производительность вашего сайта.
  Это достигается за счет уменьшения количества повторений определенного действия.
  debounce() - является идеальным решением для таких вещей, как автозаполнение текстовых полей

  Debounce и throttle рекомендуется использовать для событий, которые срабатывают чаще, чем нужно.
  Вы могли сталкиваться с подобными сценариями при привязке к движениям мыши и событиям окна, таким как прокрутка, push-уведомления и вызовы Ajax.

3. -
  once() - метод, который предотвратит выполнение, если он уже вызван. Это особенно полезно при работе с событиями
    прослушиваний, где вы часто сталкиваетесь с функциями, которые должны выполняться только один раз.
  Вместо того, чтобы удалять события прослушиваний каждый раз, вы можете использовать функцию Once в JavaScript.

  Например, у вас может быть функция, которая отправляет запрос на сервер для загрузки некоторых данных.
  С помощью функции once() вы могли бы гарантировать, что запрос не будет отправляться несколько раз, если пользователь
    продолжает нажимать на
  кнопку. Это позволит избежать проблем с производительностью.

  Как выглядит once():
    function once(func) {
      let ran = false;
      let result;
      return function() {
        if (ran) return result;
        result = func.apply(this, arguments);
        ran = true;
        return result;
      };
    }

4. -
  memoize() - функция JavaScript, которая используется для кэширования результатов данной функции, чтобы предотвратить
    многократный вызов дорогостоящих в вычислительном отношении подпрограмм с одними и теми же аргументами.

  Как выглядит memoize():
    function memoize(func) {
      const cache = new Map();
      return function() {
        const key = JSON.stringify(arguments);
        if (cache.has(key)) {
            return cache.get(key);
        }
        const result = func.apply(this, arguments);
        cache.set(key, result);
        return result;
      };
    }

5. -
  curry() (он же Currying) -  продвинутая функция JavaScript, используемая для создания новой функции из существующей
    путем “предварительного заполнения” некоторых её аргументов.

  Использование функции Curry имеет несколько преимуществ:
    1. Она помогает избежать повторного использования одной и той же переменной
    2. Она делает код более читабельным
    3. Она делит функции на множество более мелких функций

6. -
  partial() - аналогична функции Curry. Существенное различие между Curry и Partial заключается в том, что вызов функции
    Partial возвращает результат мгновенно вместо возврата другой функции по currying-цепочке.

7. -
  pipe() - служебная функция, используемая для объединения в цепочку нескольких функций и передачи выходных данных одной из них.

  Чтобы понять функцию Pipe, представьте, что у вас есть три функции:
    1. добавить Prefix к String
    2. добавить Suffix к String
    3. преобразовать строку в верхний регистр
  Затем вы можете использовать функцию pipe для создания новой функции, которая будет применять всё это слева направо к строке.

8. -
  compose() - такая же, как и функция pipe(), но она будет использовать reduceRight для применения всех функций
  Это приведёт к той же функциональности, но функции будут применяться справа налево.
