Какие компоненты следует загружать лениво?
Ответ на этот вопрос тривиален и интуитивно понятен — все, что не требуется при первоначальном рендере.
Одним из наиболее распространенных примеров являются компоненты, которые мы обычно условно скрываем с помощью директив
  v-if, такие как модальные окна или боковые панели.

  <modal-window v-if="false" />
  <modal-window v-show="false" />
Директива v-if полностью удалит компонент из DOM, а v-show просто добавит свойство display: none CSS.

Следствием такого поведения является то, что с помощью v-show компонент всегда загружается, независимо от того, какое
  значение внутри него, а для директивы v-if компонент загружается только после того, как его значение станет истинным,
  поэтому помните, что вы всегда должны использовать v-if с lazy-load компонентами!

"""
Интересное примечание: когда вы передаете компонент свойству компонентов экземпляра Vue, он проверяет, является ли
  передаваемый тип значения объектом или функцией.
Если это функция, вызов происходит только тогда, когда компонент запрашивается для рендеринга.
Вот почему трюк с v-if работает.
"""

Все, что нам нужно сделать для ленивой загрузки любого компонента, — это объединить директиву v-if и оператор динамического
  импорта, например:
<template>
  <div>
    <button @click="isModalVisible = true">Open modal</button>
    <modal-window v-if="isModalVisible" />
  </div>
</template>
export default {
  data () {
    return {
      isModalVisible: false
    }
  },
  components: {
    ModalWindow: () => import('./ModalWindow.vue')
  }
}

Impact on user experience:
  Компоненты отложенной загрузки могут сэкономить много времени при первоначальной загрузке, но за это приходится платить пользователю позже.
  Такая задержка гораздо хуже для компонентов, чем для целых страниц, потому что мы не привыкли ждать появления отдельных частей пользовательского интерфейса.
  Если при взаимодействии с веб-сайтом ничего не происходит, мы либо воспринимаем приложение как медленное, либо неработающее, и большинство из нас покидает сайт.