Деструктурирующее присваивание:
	Деструктурирующее присваивание – это специальный синтаксис, который позволяет нам «распаковать» массивы или объекты в несколько переменных, так как иногда они более удобны.
		let arr = ["Ilya", "Kantor"];
		let [firstName, surname] = arr;
		
		let [firstName, surname] = "Ilya Kantor".split(' ');
		
		// второй элемент не нужен
		let [firstName, , title] = ["Julius", "Caesar", "Consul", "of the Roman Republic"];
		
	Работает с любым перебираемым объектом с правой стороны:
		На самом деле мы можем использовать любой перебираемый объект, не только массивы:
			let [a, b, c] = "abc";
			let [one, two, three] = new Set([1, 2, 3]);
			
	Присваивайте чему угодно с левой стороны:
		Мы можем использовать что угодно «присваивающее» с левой стороны.
		Например, можно присвоить свойству объекта:
			let user = {};
			[user.name, user.surname] = "Ilya Kantor".split(' ');
			
	Цикл с .entries():
		let user = {
			name: "John",
			age: 30
		};

		// цикл по ключам и значениям
		for (let [key, value] of Object.entries(user)) {
			alert(`${key}:${value}`); // name:John, затем age:30
		}
		
	Трюк обмена переменных:
		let guest = "Jane";
		let admin = "Pete";
		// Давайте поменяем местами значения: сделаем guest = "Pete", а admin = "Jane"
		[guest, admin] = [admin, guest];
		
	Остаточные параметры «…»
		let [name1, name2, ...rest] = ["Julius", "Caesar", "Consul", "of the Roman Republic"];
		alert(rest[1]); // of the Roman Republic
		alert(rest.length); // 2
		
	Значения по умолчанию
		let [firstName, surname] = [];
		alert(firstName); // undefined
		alert(surname); // undefined
		
		// значения по умолчанию
		let [name = "Guest", surname = "Anonymous"] = ["Julius"];
		alert(name);    // Julius (из массива)
		alert(surname); // Anonymous (значение по умолчанию)
		
	Деструктуризация объекта:
		Деструктурирующее присваивание также работает с объектами.
			// Порядок не имеет значения.
			let {height: h, width: w = prompt('width?'), title = 'lorem', html: { tag } ...rest} = { title: "Menu", height: 200, width: 100, text: 'lorem ipsum', html: {tag: 'p'}  }

	Умные параметры функций:
		let options = {
			title: "My menu",
			items: ["Item1", "Item2"]
	};

	function showMenu({
		title = "Untitled",
		width: w = 100,  // width присваиваем в w
		height: h = 200, // height присваиваем в h
		items: [item1, item2] // первый элемент items присваивается в item1, второй в item2
	}) {
		alert( `${title} ${w} ${h}` ); // My Menu 100 200
		alert( item1 ); // Item1
		alert( item2 ); // Item2
	}

	showMenu(options);
	// Ниже можно поправить следующим образом, дописав в аргументе функции после объекта "= {}"
	showMenu({}); // ок, все значения - по умолчанию
	showMenu(); // так была бы ошибка
	
Остаточные параметры:
	Вызывать функцию можно с любым количеством аргументов независимо от того, как она была определена.
		function sum(a, b) {
			return a + b;
		}
		alert( sum(1, 2, 3, 4, 5) );
	Остаточные параметры могут быть обозначены через три точки .... Буквально это значит: «собери оставшиеся параметры и положи их в массив».
		function sumAll(...args) { // args — имя массива
			// args[0] = 1
			let sum = 0;
			for (let arg of args) sum += arg;
			return sum;
		}
		alert( sumAll(1, 2, 3) ); // 6
	Остаточные параметры должны располагаться в конце!
		nction f(arg1, ...rest, arg2) {} // Ошибка!
		
	Переменная "arguments"
		Все аргументы функции находятся в псевдомассиве arguments под своими порядковыми номерами.
			function showName() {
				alert( arguments.length );
				alert( arguments[0] );
			}
			showName("Юлий", "Цезарь");
		arguments != массив. Он не поддерживает методы массивов, поэтому мы не можем, например, вызвать arguments.map(...) (но мы можем его перебирать)
		
		Стрелочные функции не имеют "arguments"!
		
Оператор расширения:
	Оператор расширения - похож на остаточные параметры – тоже использует ..., но делает совершенно противоположное.
		let arr1 = [1, -2, 3, 4];
		let arr2 = [8, 3, -8, 1];

		alert( Math.max(1, ...arr1, 2, ...arr2, 25) ); // 25
		
		let str = "Привет";
		alert( [...str] ); // П,р,и,в,е,т
