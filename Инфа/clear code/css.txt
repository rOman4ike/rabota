underline sass rails file name:
  https://stackoverflow.com/a/53458229 (Файлы с _ не будут скомпилены в css)
  Символ _ (подчеркивание) является частичным для scss. Это означает, что данная таблица стилей будет импортирована (@import)
    в основную таблицу стилей, т.е. styles.scss.


# File Structure


# Sass
  Ключевые принципы
    Sass должен быть предельно прост, насколько это возможно.

    Принцип KISS (Keep It Simple Stupid, делай это проще, тупица) является ключевым моментом и в некоторых случаях может
    даже взять верх над принципом DRY (Don’t Repeat Yourself, не повторяйся).

    Иногда лучше немного повторяться, чтобы держать код понятным, а не строить тяжелую, громоздкую, сложную систему,
    которая полностью нечитаема и сложна в поддержке.

  Синтаксис и форматирование:
    * двойные (2) отступы пробелом, никаких табов;
    * правильно написанные многострочные CSS правила;

      // Yep
      .foo {
        display: block;
        overflow: hidden;
        padding: 0 1em;
      }

      // Nope
      .foo {
          display: block; overflow: hidden;

          padding: 0 1em;
      }

    Строки:
      1. Кодировка
        Чтобы избежать потенциальных проблем с кодировкой символов, крайне рекомендуется использовать кодировку UTF-8 в
        основной таблице стилей, используя директиву @charset. Убедитесь, что она идёт первой строкой в таблице стилей и перед ней ничего нет.
          @charset 'utf-8';

      2. Кавычки
        CSS не требует, чтобы строки были помещены в кавычки, даже те, что содержат пробелы. Возьмите названия семейства шрифтов,
        например: не имеет значения, оборачиваете ли вы их в кавычки для CSS-парсера или нет.
        Из-за этого, Sass также не требует помещения строк в кавычки. (например, строка 'abc' строго равна abc).

        'строки должны всегда быть обёрнуты в одинарные кавычки'

          // Yep
          $direction: 'left';

          // Nope
          $direction: left;

        3. Строки как значения CSS
          Специальные значения CSS (идентификаторы), такие как initial или sans-serif требует не быть закавыченными.
          В самом деле, объявление font-family: 'sans-serif' потерпит неудачу

            // Yep
            $font-type: sans-serif;

            // Nope
            $font-type: 'sans-serif';

        4. Строки, содержащие кавычки
          Если строка содержит одну или несколько одинарных кавычек, можно воспользоваться оборачиванием строки в двойный кавычки ("),
          чтобы избежать применение эскейп-последовательностей в строке.

          // Okay
          @warn 'You can\'t do that.';

          // Okay
          @warn "You can't do that.";

    Числа
      1. Нули
        В десятичных положительных значениях чисел меньше единицы следует ставить нуль перед точкой.
        Никогда не ставить незначащие нули после точки.

          // Yep
          .foo {
            padding: 2em;
            opacity: 0.5;
          }

          // Nope
          .foo {
            padding: 2.0em;
            opacity: .5;
          }

      2. Единицы измерения
        При работе с длинами, 0 (нуль) никогда не должен иметь единицу измерения.

          // Yep
          $length: 0;

          // Nope
          $length: 0em;

        Замечание - Внимательно, эта практика относится только к длинам. Нуль без единиц измерения для свойств времени, таких как transition-delay не допускается.

        Самая распространённая ошибка о числах в Sass, которую можно только представить – это думать, что единицы измерения –
        всего лишь строки, которые можно запросто прилагать к числу. Хотя это и звучит как правда, но единицы измерения работают совсем не так.

          $value: 42;

          // Yep
          $length: $value * 1px;

          // Nope
          $length: $value + px;

        Чтобы убрать единицу измерения из значения, нужно разделить его на одну единицу этой же меры.

          $length: 42px;

          // Yep
          $value: $length / 1px;

          // Nope
          $value: str-slice($length + unquote(''), 1, 2);

      3. Вычисления
        Числовые рассчёты должны всегда быть в круглых скобках. Мало того, что это требование значительно улучшает читаемость,
        оно также предотвращает некоторые крайние случаи, заставляя Sass считать содержимое скобок.

          // Yep
          .foo {
            width: (100% / 3);
          }

          // Nope
          .foo {
            width: 100% / 3;
          }

      4. Магические числа
        “Магическое число” - это термин старой школы программирования для неименованных числовых констант

        Излишне говорить, магические числа — чума, и их следует избегать любой ценой.
        Если вы не можете найти разумное объяснение тому, почему число работает, добавьте обширный комментарий

    Цвета
      1. Цветовые форматы
        советую соблюдать следующий порядок предпочтения цветовых форматов:
          1. Обозначение HSL;
          2. Обозначение RGB;
          3. Шестнадцатеричная нотация. Предпочтительно в нижнем регистре и по возможности укороченная.
        Названия стандартных цветов CSS не следует использовать, разве что для быстрого прототипирования.

      2. Цвета и переменные
        При использовании цвета более одного раза, сохраняйте его в переменной с осмысленным названием, описывающим цвет.

          $sass-pink: hsl(330, 50%, 60%);

    Списки
      Списки Sass эквиваленты массивам.
      Список представляет собой плоскую структуру данных (в отличие от карт), предназначенную для хранения значений любого типа
      (в том числе списков со вложенными списками).

      Списки должны соблюдать следующие правила:
        1. либо в одну строку, либо многострочный;
        2. многострочный необходим, если не помещается в 80-символьную строку;
        3. если используется для целей CSS, всегда разделяется запятой;
        4. всегда оборачивается круглыми скобками;
        5. в многострочном списке ставится запятая после последнего элемента.

        // Yep
        $font-stack: ('Helvetica', 'Arial', sans-serif);

        // Nope (not supported)
        $font-stack: (
          'Helvetica',
          'Arial',
          sans-serif,
        );

        // Nope
        $font-stack: 'Helvetica' 'Arial' sans-serif;

        // Nope
        $font-stack: 'Helvetica', 'Arial', sans-serif;

        // Nope
        $font-stack: ('Helvetica', 'Arial', sans-serif,);

    Карты
      Карта – это структура данных, сопоставляющая ключи со значениями. И ключ и значение может быть любым типом данных
      Код карт следует писать следующим образом:
        1. пробел после двоеточия (:);
        2. открывающая скобка (() на той же строке, что и двоеточие (:);
        3. ключи в кавычках, если это строки (а это так в 99% случаев);
        4. каждая пара ключ/значение на своей строке;
        5. запятая (,) на конце каждой пары ключ/значение;
        6. закрывающая запятая (,) на последней паре, чтобы легче добавлять, удалять или переставлять пункты;
        7. закрывающая скобка ()) на своей новой строке;
        8. без пробела или новой строки между закрывающей скобкой ()) и точкой с запятой (;).

        // Yep
        $breakpoints: ('small': 767px, 'medium': 992px, 'large': 1200px,)

        // Nope
        $breakpoints: ( 'small': 767px, 'medium': 992px, 'large': 1200px )

        // Nope
        $breakpoints: (small: 767px, medium: 992px, large: 1200px,)

        // Nope (since it is not supported)
        $breakpoints: (
          'small': 767px,
          'medium': 992px,
          'large': 1200px,
        )

    Набор правил CSS
      * локальные переменные объявляются перед любыми объявлениями, потом отделяются от деклараций новой строкой;
      * вызовы примесей без @content идут перед любым объявлением;
      * вложенные селекторы всегда идут после новой строки;
      * вызовы примесей с @content идут после вложенных селекторов;

        .foo, .foo-bar,
        .baz
          $length: 42em

          +ellipsis
          +size($length)
          display: block
          overflow: hidden
          margin: 0 auto

          &:hover
            color: red

          +respond-to('small')
            overflow: visible

    Порядок объявлений
      Невозможно удержать в голове все обсуждения, где мнения о сортировке объявлений в CSS настолько разнятся. Вообще, можно выявить два лагеря:
        1. придерживаться алфавитного порядка;
          .foo
            background: black
            bottom: 0
            color: white
            font-weight: bold
            font-size: 1.5em
            height: 100px
            overflow: hidden
            position: absolute
            right: 0
            width: 100px
        2. упорядочивание по назначению (position, display, colors, font, miscellaneous…).
          .foo
            height: 100px
            width: 100px
            overflow: hidden
            position: absolute
            bottom: 0
            right: 0
            background: black
            color: white
            font-weight: bold
            font-size: 1.5em

      Существует также ещё одно интересное поддерево способа упорядочивания, называется Concentric CSS, и, кажется, оно довольно популярно.
        .foo
          width: 100px
          height: 100px
          position: absolute
          right: 0
          bottom: 0
          background: black
          overflow: hidden
          color: white
          font-weight: bold
          font-size: 1.5em

    Вложенность селекторов
      Проблема с вложенностью селекторов в том, что это в конечном итоге делает код более трудным для чтения.
      Для предотвращения таких ситуаций, мы много говорили о правиле Начала (the inception rule) несколько лет назад.
      Оно советует избегать вложенности более трёх уровней, отсылая к сюжету фильма «Начало» Кристофера Нолана.
      Я буду более резок и рекомендую избегайте вложенности селекторов, насколько это возможно.

      Исключения:
        Для начала, допускается, и я даже рекомендую, вкладывать псевдоклассы и псевдоэлементы в родительский селектор.

          .foo
            color: red

            &:hover
              color: green

            &::before
              content: 'pseudo-element'

        Кроме того, при использовании классов, обозначающих состояние, таких как .is-active, это прекрасно подходит для того,
        чтобы вкладывать их под селектор компонента, чтобы всё выглядело аккуратно.

          .foo
            // …

            &.is-active
              font-weight: bold

  Соглашения по именованию

    Константы
      Объявлять константы именами в верхнем регистре.
      Это не только очень старое соглашение, но и хорошо контрастирует с обычными строчными переменными.

        // Yep
        $CSS_POSITIONS: (top, right, bottom, left, center)

        // Nope
        $css-positions: (top, right, bottom, left, center)

    Пространство имён

    Комментирование
      В основном, всё, что не является очевидным на первый взгляд, должно быть прокомментировано.
      Нет такого понятия, как слишком много документации.

      Комментируя раздел Sass, используйте встроенные комментарии Sass вместо блока в Си-стиле.

        // Добавить текущий модуль в список импортируемых модулей.
        // `!global` флаг требуется для обновления глобальной переменной.
        $imported-modules: append($imported-modules, $module) !global

  Архитектура
    одно из главных преимуществ использования CSS-препроцессоров – в возможности разделить кодовую базу на несколько файлов
    без ущерба для производительности (в отличие от CSS-правила @import).
    Благодаря @import в Sass, совершенно безопасно (и на самом деле рекомендуется) использовать столько файлов,
    сколько необходимо в разработке, все они потом будут собраны в одну таблицу стилей и так попадут на продакшен.

    Компоненты:
      Чтобы держать файлы стилей короткими и эффективными – и это не будет для вас сюрпризом – чаще всего будет хорошей идеей подумать об интерфейсе,
      как о наборе компонентов.

      Компоненты могут быть чем угодно, до тех пор, пока они:
        1. делают одну и только одну вещь;
        2. могут быть повторно используемы;
        3. независимы.

        Например, форма поиска должна рассматриваться в качестве компонента. Она должна иметь возможность быть используемой повторно на разных страницах,
        в различных ситуациях.
        Она не должна зависеть от положения в DOM (в подвале, в боковой панели, в основном содержимом…).


      Структура компонента
        Стили, описываемые в каждом компоненте должны быть связаны только с:
          1. стилем самого компонента;
          2. стилем вариантом компонента, его модификаторами и состояниями;
          3. стили потомков компонента (то есть детей), если это необходимо.

        Если вы хотите, чтобы ваши компоненты можно было стилизовать внешней темой (то есть темой внутри папки themes/),
        ограничьтесь объявлением только структурных стилей, такие как размеры (ширина/высота), паддинги, отступы, выравнивание и так далее.
        Исключите такие стили как цвет, тени, настройки шрифта, фона и так далее.

        В файл компонента можно включать специфичные для этого компонента переменные, плейсхолдеры и даже миксины и функции.
        Однако имейте в виду, что следует избегать зависимостей (то есть @import-а) от других компонентов, так как привратит
        ваш проект в мешанину неконтролируемых зависимостей, которые невозможно поддерживать.

        // Переменные для кнопки
        $button-color: $secondary-color

        // … включите сюда любые правила для кнопки:
        // - миксины
        // - плейсхолдеры
        // - функции

        /**
        * Кнопки
        */
        .button
          +vertical-rhythm
          display: block
          padding: 1rem
          color: $button-color
          // ... etc.

          /**
          * Инлайновая кнопка для больших экранов
          */
          +respond-to('medium')
            display: inline-block


        /**
        * Иконки внутри кнопок
        */
        .button > svg
          fill: currentcolor
          // ... etc.

        /**
        * Инлайновая кнопка
        */
        .button--inline
          display: inline-block

    Шаблон 7-1 (Pattern Template 7-1)
      Шаблон 7-1: 7 папок, 1 файл
        base/
        components/
        layout/
        pages/
        themes/
        utils/
        vendors/
      И, конечно же:
        main.sass

      В идеале, в конечном итоге у нас получится что-то такое:
        sass/
        |
        |– abstracts/
        |   |– _variables.scss    # Sass переменные
        |   |– _functions.scss    # Sass функции
        |   |– _mixins.scss       # Sass миксины
        |   |– _placeholders.scss # Sass плейсхолдеры
        |
        |– base/
        |   |– _reset.scss        # Reset/normalize
        |   |– _typography.scss   # Типографика
        |   …                     # Прочее
        |
        |– components/
        |   |– _buttons.scss      # Кнопки
        |   |– _carousel.scss     # Карусель
        |   |– _cover.scss        # Обложка
        |   |– _dropdown.scss     # Выпадашка
        |   …                     # и так далее
        |
        |– layout/
        |   |– _navigation.scss   # Навигация
        |   |– _grid.scss         # Сетка
        |   |– _header.scss       # Шапка
        |   |– _footer.scss       # Футер
        |   |– _sidebar.scss      # Сайдбар
        |   |– _forms.scss        # Формы
        |   …                     # и так далее
        |
        |– pages/
        |   |– _home.scss         # Специфичные стили страницы Home
        |   |– _contact.scss      # Специфичные стили страницы Contact
        |   …                     # и так далее
        |
        |– themes/
        |   |– _theme.scss        # Тема по умолчанию
        |   |– _admin.scss        # Тема админа
        |   …                     # и так далее
        |
        |– vendors/
        |   |– _bootstrap.scss    # Bootstrap
        |   |– _jquery-ui.scss    # jQuery UI
        |   …                     # и так далее
        |
        – main.sass              # Главный Sass файл