REST (Representational state transfer) – это стиль архитектуры программного обеспечения для распределенных систем, таких
  как World Wide Web, который, как правило, используется для построения веб-служб.

В общем случае REST является очень простым интерфейсом управления информацией без использования каких-то дополнительных
  внутренних прослоек.
Каждая единица информации однозначно определяется глобальным идентификатором, таким как URL.
Каждая URL в свою очередь имеет строго заданный формат.

Отсутствие дополнительных внутренних прослоек означает передачу данных в том же виде, что и сами данные.
Т.е. мы не заворачиваем данные в XML, как это делает SOAP

Каждая единица информации однозначно определяется URL – это значит, что URL по сути является первичным ключом для единицы данных.
Т.е. например третья книга с книжной полки будет иметь вид /book/3, а 35 страница в этой книге — /book/3/page/35.

RESTful API - это архитектурный стиль интерфейса прикладных программ (API), который использует HTTP-запросы для доступа
  и использования данных. Эти данные могут быть использованы для типов данных GET, PUT, POST и DELETE

API для сайта - это код, позволяющий двум программам взаимодействовать друг с другом.


Best Practise:
  ЗАПРОСЫ:
    1. НЕ ИСПОЛЬЗУЙТЕ ГЛАГОЛЫ В URL-адресах.
      Если бы вы понимали основы API, вы бы знали, что вставка глаголов в URL — не очень хорошая идея.
      Причина этого в том, что HTTP должен быть самодостаточным для описания цели действия.
    2. ИСПОЛЬЗУЙТЕ СУЩЕСТВИТЕЛЬНЫЕ во множественном числе, ДЛЯ НАЗВАНИЯ КОЛЛЕКЦИИ
      Если вам нужно разработать коллекцию с помощью REST API, просто используйте существительные во множественном числе.
      Из примера видно, что «автомобилем» называется номер 123 из всего списка «автомобилей».
        GET /cars/123
      Этот пример не ясно показывает, есть ли в системе более одного автомобиля или нет.
        GET /car/123
    3. ВОЗВРАЩАЕМ ДЕТАЛИ ОБ ОШИБКЕ В ТЕЛЕ ОТВЕТА
      Конечной точке API удобно возвращать сведения об ошибке в формате JSON или теле ответа, чтобы помочь пользователю при отладке.
      {
        "error": "Invalid payoad.",
        "detail": {
          "surname": "This field is required."
        }
      }
    4. ИСПОЛЬЗУЙТЕ ВЛОЖЕНИЕ РЕСУРСОВ
      Цели ресурсов всегда содержат некоторую функциональную иерархию или взаимосвязаны друг с другом.
      Однако по-прежнему идеально ограничить вложенность одним уровнем в REST API.
      Слишком большое количество вложенных уровней может потерять свою элегантную привлекательность.
        /users // list all users
        /users/123 // specific user
        /users/123/orders // list of orders that belong to a specific user
        /users/123/orders/0001 // specific order of a specific users order list
    5. ИСПОЛЬЗУЙТЕ SSL/TLS
      Если вам необходимо зашифровать связь с вашим API, всегда используйте SSL/TLS.
    6. ЗАЩИТИТЕ СВОЙ API
      Хакеры любят использовать автоматизированные сценарии для атаки на ваш API-сервер.
      Прежде всего, ваш API должен иметь HTTP Strict Transport Security (HSTS) policy
      Далее вам следует защитить свою сеть от атак посредников, атак с понижением версии протокола, перехвата сеанса и т. д.
      Просто используйте все соответствующие стандарты безопасности для безопасности вашего API.