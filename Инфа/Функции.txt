Function Expression (AFE Anonymous function expression)
	let sayHi = function() {
		alert( "ะัะธะฒะตั" );
	};
	
	ะัะทัะฒะฐัััั, ััะพะฑั ะฝะต ะทะฐะณััะทะฝััั ะณะปะพะฑะฐะปัะฝัั ะพะฑะปะฐััั ะฒะธะดะธะผะพััะธ.

	Function expression ะผะพะถะฝะพ ะฟะตัะตะดะฐัั ััะฝะบัะธั ะฒ ะบะฐัะตััะฒะต ะฐัะณัะผะตะฝัะฐ (Declaration ะฝะตะปัะทั)

Function Declaration
	function sayHi() {
		alert( "ะัะธะฒะตั" );
	}
	
	ะะฑััะฒะปะตะฝะธั ััะฝะบัะธะน ะทะฐะณััะถะฐัััั ะฒ ะบะพะฝัะตะบัั ะฒัะฟะพะปะฝะตะฝะธั ะดะพ ะฒัะฟะพะปะฝะตะฝะธั ะบะพะดะฐ. ะญัะพ ะธะทะฒะตััะฝะพ ะบะฐะบ ะฟะพะดัะตะผ (hoisting), ัะพ ะตััั ะฒั ะผะพะถะตัะต ะธัะฟะพะปัะทะพะฒะฐัั ััะฝะบัะธั ะดะพ ะตะต ะพะฑััะฒะปะตะฝะธั.
	
	ะ ะพัะปะธัะธะต ะพั Function Declaration, Function Expression ะฝะต ะทะฐะณััะถะฐัััั ะฒ ะบะพะฝัะตะบัั ะฒัะฟะพะปะฝะตะฝะธั, ะฐ ะทะฐะฟััะบะฐัััั ัะพะปัะบะพ ัะพะณะดะฐ, ะบะพะณะดะฐ ะฟัะพะณัะฐะผะผะฐ ััะฐะปะบะธะฒะฐะตััั ั ะฝะธะผะธ.

Function Expressions vs Function Declarations
	ะัั ะฝะธะบัะพ ะฝะพัะผะฐะปัะฝะพ ะฝะต ะณะพะฒะพัะธั ะบะพะณะดะฐ ััะพ ะธัะฟะพะปัะทะพะฒะฐัั, ะฟะพััะพะผั ะผะพะถะฝะพ ัะดะตะปะฐัั ะฒัะฒะพะด: ััะพ ัะพั ัะพ ะธ ะธัะฟะพะปัะทัะตัั
	ะะพ ะฟะฐัั ัะตะบะพะผะตะฝะดะฐัะธะน ะฝะฐัะตะป:
		1. ะัะปะธ ััะฝะบัะธะธ ะฝัะถะฝั ัะพะปัะบะพ ะพะดะธะฝ ัะฐะท ะธ ะฒะฐะผ ะดะพััะฐัะพัะฝะพ, ััะพะฑั ะพะฝะฐ ะฒัะทะฒะฐะปะฐัั ะพะดะธะฝ ัะฐะท ะธ ะผั ะผะพะณะปะธ ะทะฐะฑััั ะพ ะฝะตะน, ัะพ ะฒััะฐะถะตะฝะธะต ััะฝะบัะธะธ - ัะพัะพัะธะน ะฒัะฑะพั.
		
Arrow Function
	const sum = (a, b) => a + b
	ะกััะตะปะพัะฝัะต ััะฝะบัะธะธ ะฒัะตะณะดะฐ ะฐะฝะพะฝะธะผะฝั - ะฝะตั ะฒะพะทะผะพะถะฝะพััะธ ะดะฐัั ะธะผั ัััะตะปะพัะฝะพะน ััะฝะบัะธะธ.
	
IIFE (ะะตะผะตะดะปะตะฝะฝะพ ะฒัะทัะฒะฐะตะผัะต ะฒััะฐะถะตะฝะธั ััะฝะบัะธะน)
	ะะพะณะดะฐ ััะฝะบัะธั ัะพะทะดะฐะตััั ะพะดะฝะพะฒัะตะผะตะฝะฝะพ ั ะตะต ะฒัะทะพะฒะพะผ, ะฒั ะผะพะถะตัะต ะธัะฟะพะปัะทะพะฒะฐัั IIFE, ะบะพัะพัะพะต ะฒัะณะปัะดะธั ัะปะตะดัััะธะผ ะพะฑัะฐะทะพะผ:
		(function() => {})();
	ะธะปะธ:
		(() => {})();
		
	ะงะฐัะต ะฒัะตะณะพ ะพะฑะปะฐััั ะฒะธะดะธะผะพััะธ ััะฝะบัะธะธ ะฒ IIFE ะธัะฟะพะปัะทัะตััั ะดะปั ะฟัะตะดะพัะฒัะฐัะตะฝะธั ััะตัะบะธ ะปะพะบะฐะปัะฝัั ะฟะตัะตะผะตะฝะฝัั ะฒ ะณะปะพะฑะฐะปัะฝัั ะพะฑะปะฐััั ะฒะธะดะธะผะพััะธ.
	ะะฐัะธัะฝะฐั ัะพัะบะฐ ั ะทะฐะฟััะพะน ะฒ ะบะพะฝัะต IIFE ัััะตััะฒัะตั ะดะปั ะฟัะตะดะพัะฒัะฐัะตะฝะธั ะฟัะพะฑะปะตะผ, ะบะพัะพััะต ะผะพะณัั ะฒะพะทะฝะธะบะฝััั ะฟัะธ ะบะพะฝะบะฐัะตะฝะฐัะธะธ ะดะฒัั ัะฐะนะปะพะฒ JavaScript.
	
	ะะผะตะฝะพะฒะฐะฝะฝัะต IIFE
		ะะธัะต ะฝะต ะฟะพะผะตะฝัะตััั, ะฝะพ ะธะผั ั ััะฝะบัะธะธ ะฑัะดะตั :)
		(function iife() {
			// ...
		})();
		
	
	ะัั, IIFE ััะพะธั ะธัะฟะพะปัะทะพะฒะฐัั ัะพะปัะบะพ ะธะท-ะทะฐ ัะพะณะพ, ััะพ ัั ะฝะต ะผะพะถะตัั ะธัะฟะพะปัะทะพะฒะฐัั var, ั.ะบ. ะฒัะต ะฟัะธะผะตัั ะธัะฟะพะปัะทะพะฒะฐะฝะธั ะพัะฝะพััััั ะบ var
	Use cases:
		1. ะะพะบะฐะปัะฝัะต ะฟะตัะตะผะตะฝะฝัะต, ะพะฑััะฒะปะตะฝะฝัะต ั ะฟะพะผะพััั ะบะปััะตะฒะพะณะพ ัะปะพะฒะฐ var, ะฟัะธะฒัะทัะฒะฐัััั ะบ ะพะฑัะตะผะปััะตะน ััะฝะบัะธะธ. ะัะปะธ ัะฐะบะพะน ััะฝะบัะธะธ ะฝะต ัััะตััะฒัะตั, ะฟะตัะตะผะตะฝะฝัะต ะฑัะดัั ัะพะทะดะฐะฝั ะบะฐะบ ะณะปะพะฑะฐะปัะฝัะต ะฟะตัะตะผะตะฝะฝัะต, ัะตะผ ัะฐะผัะผ ะทะฐะณััะทะฝัั ะณะปะพะฑะฐะปัะฝัั ะพะฑะปะฐััั ะฒะธะดะธะผะพััะธ. ะงัะพะฑั ะฟัะตะดะพัะฒัะฐัะธัั ััะพ, ะผั ะผะพะถะตะผ ะธัะฟะพะปัะทะพะฒะฐัั IIFE ะดะปั ัะพะทะดะฐะฝะธั ััะฝะบัะธะธ-ะพะฑะตััะบะธ
			(function () {
				var foo = "bar";
				console.log(foo);
			})();

			foo; // ReferenceError: foo is not defined
		2. So I used an IIFE to create my array (ัะท, ะณะพะฒะพััั ััะพ ััะพ ะฐะฝัะธะฟะฐััะตัะฝ):
				const faces = (() => {
						const faces='๐๐๐๐๐๐๐๐คฃ๐๐๐๐๐๐๐';
						const faceArray = [];
						for(let index = 0; index < faces.length; index += 2) {
								let face = faces[index] + faces[index+1]
								faceArray.push(face)
						}
						return faceArray
				})();
			
	ะก ััะตัะพะผ ัะบะฐะทะฐะฝะฝะพะณะพ, IIFE ัะถะต ะฟัะฐะบัะธัะตัะบะธ ัััะฐัะตะป, ะฟะพัะบะพะปัะบั ัะตะฟะตัั ะผั ะผะพะถะตะผ ะพะฑััะฒะปััั ะพะฑะปะฐััะธ ะฒะธะดะธะผะพััะธ ะฝะฐ ััะพะฒะฝะต ะฑะปะพะบะพะฒ. ะะดะฝะฐะบะพ IIFE ะฒัะต ะตัะต ัะฐัะฟัะพัััะฐะฝะตะฝั ะธะท-ะทะฐ ะพะฑัะฐัะฝะพะน ัะพะฒะผะตััะธะผะพััะธ.
		// ะญัะพ ัะฐะฑะพัะฐะตั ัะพะปัะบะพ ะดะปั ะฟะตัะตะผะตะฝะฝัั ะฑะปะพัะฝะพะณะพ ะดะธะฐะฟะฐะทะพะฝะฐ (ั.ะต. `const` ะธ `let`).
		{
			const inside = 'bar';

			console.log(outside); 'foo'
			console.log(inside); 'bar'
		}
				
Callbacks
	ะคัะฝะบัะธั, ะฟะตัะตะดะฐะฝะฝะฐั ะดััะณะพะน ััะฝะบัะธะธ
		function mapAction(item) {
			// do stuff to an item
		}
		array.map(mapAction)
	ะัะพะฑะปะตะผะฐ ะทะดะตัั ะฒ ัะพะผ, ััะพ mapAction ะฑัะดะตั ะดะพัััะฟะตะฝ ะฒัะตะผั ะฒะฐัะตะผั ะฟัะธะปะพะถะตะฝะธั - ะฒ ััะพะผ ะฝะตั ะฝะตะพะฑัะพะดะธะผะพััะธ.
		array.map(item => { //do stuff to an item })
	ะธะปะธ:
		const mapAction = function(item) {
			// do stuff to an item
		}
		array.map(mapAction)	
	
	ะัะธะผะตั callback:
		function getNewDate(callback) {
			setTimeout(function () {
				callback(new Date());
			}, 4000);
		}

		function getPayload(payload) {
			console.log(`The date is: ${payload}`);
		}

		getNewDate(getPayload);

NFE (Named Function Expression)
	let sayHi = function func(who) {
		alert(`Hello, ${who}`);
		func("Guest"); // ะะพะถะตะผ
		sayHi('Guest) // ะะพะถะตะผ (ะะพ ะฟะตัะตะผะตะฝะฝะฐั sayHi ะผะพะถะตั ะฟะพะผะตะฝััััั ะฝะฐ ะดััะณัั ะฟัะธ ะฟะตัะตะดะฐัะต ััะฝะบัะธะธ ะดััะณะพะน ะฟะตัะตะผะตะฝะฝะพะน)
	};
	
	ะััั ะดะฒะต ะฒะฐะถะฝัะต ะพัะพะฑะตะฝะฝะพััะธ ะธะผะตะฝะธ func, ัะฐะดะธ ะบะพัะพัะพะณะพ ะพะฝะพ ะดะฐัััั:
		ะะฝะพ ะฟะพะทะฒะพะปัะตั ััะฝะบัะธะธ ัััะปะฐัััั ะฝะฐ ัะตะฑั ะถะต.
		ะะฝะพ ะฝะต ะดะพัััะฟะฝะพ ะทะฐ ะฟัะตะดะตะปะฐะผะธ ััะฝะบัะธะธ.
	
	ะะพัะตะผั ะผั ะธัะฟะพะปัะทัะตะผ func? ะะพัะตะผั ะฟัะพััะพ ะฝะต ะธัะฟะพะปัะทะพะฒะฐัั sayHi ะดะปั ะฒะปะพะถะตะฝะฝะพะณะพ ะฒัะทะพะฒะฐ? 
	ะะพะถะตะผ, ะะดะฝะฐะบะพ, ั ััะพะณะพ ะบะพะดะฐ ะตััั ะฟัะพะฑะปะตะผะฐ, ะบะพัะพัะฐั ะทะฐะบะปััะฐะตััั ะฒ ัะพะผ, ััะพ ะทะฝะฐัะตะฝะธะต sayHi ะผะพะถะตั ะฑััั ะธะทะผะตะฝะตะฝะพ.
	
new Function
	let sum = new Function('a', 'b', 'return a + b');
	
	ะะพะณะดะฐ ะฒั ัะพะทะดะฐะตัะต ััะฝะบัะธั, ะฟัะธะผะตะฝัั new Function, [[Environment]] ัััะปะฐะตััั ะฝะต ะฝะฐ ัะตะบััะตะต ะะตะบัะธัะตัะบะพะต ะพะบััะถะตะฝะธะต, ะฐ ะฝะฐ ะณะปะพะฑะฐะปัะฝะพะต.
	ะัะฟะพะปัะทัะตััั ะบะพะณะดะฐ ััะฝะบัะธั ะฟะพะปััะฐะตััั ะพัะบัะดะฐ-ัะพ (ะฝะฐะฟัะธะผะตั ะพั ัะตัะฒะตัะฐ)
	
Anonymous Functions
	ะคัะฝะบัะธั ะฑะตะท ะธะผะตะฝะธ ะฝะฐะทัะฒะฐะตััั ะฐะฝะพะฝะธะผะฝะพะน ััะฝะบัะธะตะน.
		var b = function (){
			console.log("This is a function expression example")
		}
	ะะะ
		() => {}

Constructors
	ะคัะฝะบัะธะธ-ะบะพะฝััััะบัะพัั ัะตัะฝะธัะตัะบะธ ัะฒะปััััั ะพะฑััะฝัะผะธ ััะฝะบัะธัะผะธ. ะะพ ะตััั ะดะฒะฐ ัะพะณะปะฐัะตะฝะธั:
		1. ะะผั ััะฝะบัะธะธ-ะบะพะฝััััะบัะพัะฐ ะดะพะปะถะฝะพ ะฝะฐัะธะฝะฐัััั ั ะฑะพะปััะพะน ะฑัะบะฒั.
		2. ะคัะฝะบัะธั-ะบะพะฝััััะบัะพั ะดะพะปะถะฝะฐ ะฒัะฟะพะปะฝััััั ัะพะปัะบะพ ั ะฟะพะผะพััั ะพะฟะตัะฐัะพัะฐ "new".
		
		function User(name) {
			// this = {};  (ะฝะตัะฒะฝะพ)
			this.name = name;
			this.isAdmin = false;
			// return this;  (ะฝะตัะฒะฝะพ)
		}
		let user = new User("Jack");
	
	ะะพะณะดะฐ ััะฝะบัะธั ะฒัะทัะฒะฐะตััั ะบะฐะบ new User(...), ะฟัะพะธััะพะดะธั ัะปะตะดัััะตะต:
		1. ะกะพะทะดะฐัััั ะฝะพะฒัะน ะฟัััะพะน ะพะฑัะตะบั, ะธ ะพะฝ ะฟัะธัะฒะฐะธะฒะฐะตััั this.
		2. ะัะฟะพะปะฝัะตััั ัะตะปะพ ััะฝะบัะธะธ. ะะฑััะฝะพ ะพะฝะพ ะผะพะดะธัะธัะธััะตั this, ะดะพะฑะฐะฒะปัั ััะดะฐ ะฝะพะฒัะต ัะฒะพะนััะฒะฐ.
		3. ะะพะทะฒัะฐัะฐะตััั ะทะฝะฐัะตะฝะธะต this.
		
Constructor vs Object Literal
	ะะฑัะตะบัะฝัะน ะปะธัะตัะฐะป ะพะฑััะฝะพ ะธัะฟะพะปัะทัะตััั ะดะปั ัะพะทะดะฐะฝะธั ะพะดะฝะพะณะพ ะพะฑัะตะบัะฐ, ะฒ ัะพ ะฒัะตะผั ะบะฐะบ ะบะพะฝััััะบัะพั ะฟะพะปะตะทะตะฝ ะดะปั ัะพะทะดะฐะฝะธั ะฝะตัะบะพะปัะบะธั ะพะฑัะตะบัะพะฒ
		// ะะฑัะตะบัะฝัะน ะปะธัะตัะฐะป
		let user = {
				name: 'Bob'
		}
		// ะะพะฝััััะบัะพั
		function User() {
				this.name = 'Bob';
		}

Accessor Function Initializer
	var obj = {
		  value: 0,
		  get f() {
		      return this.value;
		  },
		  set f(v) {
		      this.value = v;
		  }
	};
