Промисы:
	Когда он получает результат, сейчас или позже – не важно, он должен вызвать один из этих колбэков:
		resolve(value) — если работа завершилась успешно, с результатом value.
		reject(error) — если произошла ошибка, error – объект ошибки.
	У объекта promise, возвращаемого конструктором new Promise, есть внутренние свойства:
		state («состояние») — вначале "pending" («ожидание»), потом меняется на "fulfilled" («выполнено успешно») при вызове resolve или на "rejected" («выполнено с ошибкой») при вызове reject.
		result («результат») — вначале undefined, далее изменяется на value при вызове resolve(value) или на error при вызове reject(error).

Потребители: .then, .catch
	.then – функция, которая выполняется, когда промис переходит в состояние «выполнен успешно», и получает результат.
		Второй аргумент .then – функция, которая выполняется, когда промис переходит в состояние «выполнен с ошибкой», и получает ошибку.
	.catch - это сокращённый, «укороченный» вариант .then(null, f).
	.finally(f) похож на .then(f, f), в том смысле, что f выполнится в любом случае, когда промис завершится: успешно или с ошибкой.
		Идея finally состоит в том, чтобы настроить обработчик для выполнения очистки/доведения после завершения предыдущих операций.
		Есть важные различия c then:
			1. Обработчик, вызываемый из finally, не имеет аргументов. В finally мы не знаем, как был завершён промис.
			2. Обработчик finally «пропускает» результат или ошибку дальше, к последующим обработчикам.
			3. Обработчик finally также не должен ничего возвращать. Если это так, то возвращаемое значение молча игнорируется.

Обработка ошибок:
	Если в каком-то из then-функций произойдет ошибка, то выполнение кода перейдет в блок catch, который будет обрабатывать ошибку.
		fetch('/article/promise-chaining/user.json')
			.then(response => response.json())
			.then(user => fetch(`https://api.github.com/users/${user.name}`))
			.catch(error => alert(error.message));

Необработанные ошибки:
	Что произойдёт, если ошибка не будет обработана? Например, мы просто забыли добавить .catch в конец цепочки, как здесь:
		new Promise(function() {
			noSuchFunction(); // Ошибка (нет такой функции)
		})
		.then(() => {
			// обработчики .then, один или более
		});
	Что происходит, когда обычная ошибка не перехвачена try..catch? Скрипт умирает с сообщением в консоли. Похожее происходит и в случае необработанной ошибки промиса.

Promise API:
	В классе Promise есть 6 статических методов. Давайте познакомимся с ними.

	Promise.all - Допустим, нам нужно запустить множество промисов параллельно и дождаться, пока все они выполнятся.
		Promise.all([
			new Promise(resolve => setTimeout(() => resolve(1), 3000)), // 1
			new Promise(resolve => setTimeout(() => resolve(2), 2000)), // 2
			new Promise(resolve => setTimeout(() => resolve(3), 1000))  // 3
		]).then(alert); // когда все промисы выполнятся, результат будет 1,2,3

	Promise.allSettled
		Promise.all завершается с ошибкой, если она возникает в любом из переданных промисов. Это подходит для ситуаций «всё или ничего».
		Метод Promise.allSettled всегда ждёт завершения всех промисов. В массиве результатов будет
			{status:"fulfilled", value:результат} для успешных завершений,
			{status:"rejected", reason:ошибка} для ошибок.
		То есть, для каждого промиса у нас есть его статус и значение/ошибка.

	Promise.race - похож на Promise.all, но ждёт только первый выполненный промис, из которого берёт результат (или ошибку).

	Promise.any - очень похож на Promise.race, но ждёт только первый успешно выполненный промис

	Promise.resolve/reject:
		let promise = new Promise(resolve => resolve(value));
		let promise = new Promise((resolve, reject) => reject(error));


Промисификация:
	Промисификация – это длинное слово для простого преобразования. Мы берём функцию, которая принимает колбэк и меняем её, чтобы она вместо этого возвращала промис.

Микрозадачи:
	Обработчики промисов .then/.catch/.finally всегда асинхронны.

	let promise = Promise.resolve();
	promise.then(() => alert("промис выполнен"));
	alert("код выполнен"); // этот alert показывается первым

	Если вы запустите его, сначала вы увидите код выполнен, а потом промис выполнен.

	Очередь микрозадач:
		Асинхронные задачи требуют правильного управления. Для этого стандарт предусматривает внутреннюю очередь PromiseJobs, более известную как «очередь микрозадач (microtask queue)»
		Как сказано в спецификации:
			Очередь определяется как первым-пришёл-первым-ушёл (FIFO): задачи, попавшие в очередь первыми, выполняются тоже первыми.
			Выполнение задачи происходит только в том случае, если ничего больше не запущено.

		Или, проще говоря, когда промис выполнен, его обработчики .then/catch/finally попадают в очередь. Они пока не выполняются.
		Движок JavaScript берёт задачу из очереди и выполняет её, когда он освободится от выполнения текущего кода.

		Вот почему сообщение «код выполнен» в примере выше будет показано первым.

	Необработанные ошибки:
		"Необработанная ошибка" возникает в случае, если ошибка промиса не обрабатывается в конце очереди микрозадач.


Фишечки:
	1.
	// Я хочу применить remove() ко всем документам
	db.allDocs({include_docs: true})
  .then(function (result) {
    result.rows.forEach(function (row) {
      // Метод remove возвращает promise
      db.remove(row.doc);
    });
  })
  .then(function () {
    // А здесь я наивно уверен, что все документы уже удалены!
  });
  Что не так с этим кодом? Проблема в том, что первая функция возвращает undefined, а значит вторая не ждет окончания выполнения db.remove() для всех документов. На самом деле она вообще ничего не ждет и выполнится, когда будет удалено любое число документов, а может и ни одного.

	Подводя итог, скажу, что конструкции типа forEach, for и while «не те дроны, что вы ищете». Вам нужен Promise.all():

	db.allDocs({include_docs: true})
		.then(function (result) {
			var arrayOfPromises = result.rows.map(function (row) {
				return db.remove(row.doc);
			});
			return Promise.all(arrayOfPromises);
		})
		.then(function (arrayOfResults) {
			// Вот теперь все документы точно удалены!
		});

	2.
		Это еще одна распространенная ошибка — блаженно верить, что ваши промисы никогда не вернут ошибку. Многие разработчики просто забывают добавлять catch() куда-либо в своем коде.
		Чтобы избежать этого неприятного сценария, я взял за правило, которое затем переросло в привычку, всегда добавлять в конец моей цепочки промисов метод catch():

		somePromise().then(function () {
				return anotherPromise();
			})
			.then(function () {
				return yetAnotherPromise();
			})
			// простое и полезное окончание цепочки промисов:
			.catch(console.log.bind(console));

	3.
		Что не так с этим кодом?
			somePromise().then(function () {
					someOtherPromise();
				})
				.then(function () {
					// Ох, я надеюсь someOtherPromise «зарезолвился»…
					// Осторожно, спойлер: нет, не «зарезолвился».
				});

		Как я уже упоминал, магия промисов в том, что они возвращают нам драгоценные return и throw. Но что это означает на практике?
		Каждый промис предоставляет вам метод then() (а еще catch(), который на практике просто «сахар» для then(null, …)). И вот мы внутри функции then():
			somePromise().then(function () {
				// Вау, мы внутри функции then()!
			});

		Что мы можем тут сделать? Три вещи:
			Вернуть (return) другой промис
				getUserByName('nolan').then(function (user) {
					// Функция getUserAccountById возвращает promise,
					// результат которого попадет в следующий then
					return getUserAccountById(user.id);
				})
				.then(function (userAccount) {
					// Я знаю все о пользователе!
				});
				Использование здесь return — это ключевой момент. Если бы я просто вызвал getUserAccountById, то да, был бы запрос за данными пользователя, был бы получен результат, который нигде бы не пригодился — следующий then получил бы undefined вместо желанного userAccount.
			Вернуть (return) синхронное значение (или undefined)
				getUserByName('nolan').then(function (user) {
					if (inMemoryCache[user.id]) {
						// Данные этого пользователя уже есть,
						// возвращаем сразу
						return inMemoryCache[user.id];
					}
					// А вот про этого пока не знаем,
					// вернем промис запроса
					return getUserAccountById(user.id);
				})
				.then(function (userAccount) {
					// Я знаю все о пользователе!
				});

				Разве не круто? Второй функции в цепочке не важно, откуда взялись данные, из кэша или как результат запроса, а первая вольна вернуть или синхронное значение сразу, или асинхронный промис, который уже в свою очередь вернет синхронное значение.
				Для себя я ввел правило, которое затем переросло в привычку — всегда использовать return внутри then или выдавать ошибку при помощи throw. Я рекомендую вам поступать так же.
			Выдать (throw) синхронную ошибку
				Вот мы и подошли к throw. Здесь промисы начинают сиять еще ярче. Предположим, мы хотим выдать (throw) синхронную ошибку, если пользователь не авторизован. Это просто:

				getUserByName('nolan').then(function (user) {
						if (user.isLoggedOut()) {
							// Пользователь вышел — выдаем ошибку!
							throw new Error('user logged out!');
						}
						if (inMemoryCache[user.id]) {
							// Данные этого пользователя уже есть,
							// возвращаем сразу
							return inMemoryCache[user.id];
						}
						// А вот про этого пока не знаем,
						// вернем промис запроса
						return getUserAccountById(user.id);
					})
					.then(function (userAccount) {
						// Я знаю все о пользователе!
					})
					.catch(function (err) {
						// Упс, ошибка, но мы к ней готовы!
					});

				Наш catch() получит синхронную ошибку, если пользователь не авторизован, или асинхронную, если любой из промисов выше перейдет в состояние rejected. И снова, функции в catch без разницы, была ошибка синхронной или асинхронной.

	4.
		Я уже показывал выше, насколько удобны промисы при оборачивании синхронной логики в асинхронный код. Вероятно, вы могли замечать за собой что-то похожее:

			new Promise(function (resolve, reject) {
				resolve(someSynchronousValue);
			}).then(/* ... */);

		Имейте в виду, вы можете написать то же самое гораздо короче:

		Promise.resolve(someSynchronousValue).then(/* ... */);

		Просто запомните, любой код, который может выдать синхронную ошибку — потенциальная проблема при отладке из-за «проглоченных» ошибок. Но если вы обернете его в Promise.resolve(), то можете быть уверены, что поймаете ее при помощи catch().

	5. catch() не одно и то же с then(null, …)
		somePromise().then(function () {
		  throw new Error('oh noes');
		})
		.catch(function (err) {
		  // Ошибка поймана! :)
		});

		somePromise().then(function () {
			throw new Error('oh noes');
		}, function (err) {
			// Ошибка? Какая ошибка? O_o
		});


	6. Зачем оборачивать запрос с промис?
		https://stackoverflow.com/questions/56318505/what-is-the-benefit-of-wrapping-fetch-in-a-promise