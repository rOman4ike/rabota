Entry Points:
  Существует несколько способов определить свойство entry в конфигурации webpack.

  Single Entry (Shorthand) Syntax
    Мы можем передать массив путей к файлам в свойство entry, что позволит создать так называемый "multi-main entry".
    Это полезно, когда вы хотите внедрить несколько зависимых файлов вместе и составить график их зависимостей в один "чанк".
      module.exports = {
        entry: ['./src/file_1.js', './src/file_2.js'],
        output: {
          filename: 'bundle.js',
        },
      };

    "Single Entry Syntax" отличный выбор, когда вы хотите быстро настроить конфигурацию webpack для приложения или
    инструмента с одной точкой входа (т.е. библиотекой). Однако этот синтаксис не дает большой гибкости в расширении или
    масштабировании конфигурации.

  Object Syntax:
    entry: {
      app: './src/app.js',
      adminApp: './src/adminApp.js',
    },

    "ВАЖНО!":
      "Scalable webpack configurations" - это те, которые можно использовать повторно и комбинировать с другими частичными конфигурациями.
      Затем они объединяются с помощью специализированных инструментов, таких как webpack-merge.

  EntryDescription object:
    Объект описания entry point. Вы можете указать следующие свойства.
      dependOn - Точки входа, от которых зависит текущая точка входа. Они должны быть загружены до загрузки этой точки входа.
      filename - Указывает имя каждого output file на диске.
      import - Модуль(и), которые загружаются при запуске.
      library - Укажите параметры библиотеки, чтобы связать библиотеку с текущей точкой входа.
      runtime - Имя chunk runtime. Если задано, будет создан новый chunk runtime.
      publicPath - Указывает публичный URL-адрес для выходных файлов этой записи при обращении к ним в браузере

      module.exports = {
        entry: {
          b2: {
            dependOn: 'a2',
            import: './src/app.js',
          },
        },
      };

    runtime и dependOn не должны использоваться вместе в одной записи - приведет к ошибке

    Scenarios:
      1. Separate App and Vendor Entries
        Что это дает? Мы сообщаем webpack, что хотим получить 2 отдельные entry points (как в примере ниже).
          entry: {
            main: './src/app.js',
            vendor: './src/vendor.js',
          },

        "ВАЖНО!"
          В webpack версии < 4 было принято добавлять vendors как отдельную entry point, чтобы скомпилировать их как
          отдельный файл (в сочетании с CommonsChunkPlugin).

          В webpack 4 это не рекомендуется. Вместо этого опция optimization.splitChunks позаботится о разделении vendors
          и modules приложений и создании отдельного файла.

Output points:
  Обратите внимание, что, хотя точек входа может быть несколько, указывается только одна конфигурация output.

  Минимальное требование к свойству output в конфигурации webpack - установить его значение в объект и указать имя
  output.filename, которое будет использоваться для выходного файла(ов):
    output: {
      filename: 'bundle.js',
    },

  Multiple Entry Points:
    Если ваша конфигурация создает более одного "chunk", вы должны использовать "substitutions", чтобы гарантировать,
    что каждый файл имеет уникальное имя.
      output: {
        filename: '[name].js',
        path: __dirname + '/dist',
      },

Loaders:
  "Loaders" - это преобразования, которые применяются к "source code" модуля
  Они позволяют предварительно обрабатывать файлы по мере их импорта или загрузки.

  Загрузчики могут преобразовывать файлы с другого языка (например, TypeScript) в JavaScript или загружать встроенные изображения
  в виде URL-адресов данных.

  Using Loaders:
    Существует два способа использования загрузчиков в вашем приложении:
      1. Configuration (рекомендуется): Укажите их в файле webpack.config.js.
      2. Inline: Указывайте их явно в каждом операторе импорта.

  Configuration:
    module.rules позволяет указать несколько загрузчиков в конфигурации webpack.

    Загрузчики оцениваются/выполняются справа налево (или снизу вверх).

  Inline:
    Можно указать загрузчики в операторе импорта или в любом другом эквивалентном методе "импорта".
      import Styles from 'style-loader!css-loader?modules!./styles.css';

    Можно переопределить все загрузчики, preLoaders и postLoaders из конфигурации, добавив префикс в строку импорта:
      1. Префикс ! отключит все сконфигурированные обычные loaders
        import Styles from '!style-loader!css-loader?modules!./styles.css';
      2. Префикс с !! отключит все настроенные загрузчики (preLoaders, loaders, postLoaders)
        import Styles from '!!style-loader!css-loader?modules!./styles.css';
      3. Префикс -! отключит все настроенные preLoaders и loaders, но не postLoaders
        import Styles from '-!style-loader!css-loader?modules!./styles.css';

    "ВАЖНО!":
      Используйте module.rules всегда, когда это возможно, так как это уменьшит количество шаблонов в вашем исходном коде
      и позволит вам быстрее отлаживать или находить загрузчик, если что-то пошло не так.

  Loader Features:
    1. Loaders можно объединять в цепочки.
      Каждый загрузчик в цепочке применяет преобразования к обрабатываемому ресурсу.
      Цепочка выполняется в обратном порядке.
      Первый загрузчик передает свой результат (ресурс с примененными преобразованиями) следующему, и так далее.
      Наконец, webpack ожидает, что JavaScript будет возвращен последним загрузчиком в цепочке.

    2. Loaders могут быть синхронными или асинхронными.

    3. Loaders могут быть настроены с помощью объекта options
      (использование параметров query для установки опций все еще поддерживается, но уже устарело).

    4. Plugins могут наделять loaders дополнительными возможностями.

    5. Loaders могут испускать дополнительные произвольные файлы.

Plugins:
  "Plugins" - это основа webpack. Они также служат для того, чтобы делать все, что не может сделать loader.

  Anatomy:
    Plugin webpack - это объект JavaScript, имеющий метод apply. Этот метод apply вызывается компилятором webpack,
    предоставляя доступ ко всему жизненному циклу компиляции.

  Usage
    В зависимости от того, как вы используете webpack, существует несколько способов использования плагинов.
      1. Configuration
        plugins: [
          new webpack.ProgressPlugin(),
          new HtmlWebpackPlugin({ template: './src/index.html' }),
        ],

      2. Node API
        При использовании Node API вы также можете передавать плагины через свойство plugins в конфигурации.
          const webpack = require('webpack'); //to access webpack runtime
          const configuration = require('./webpack.config.js');
          let compiler = webpack(configuration);
          new webpack.ProgressPlugin().apply(compiler);

          compiler.run(function (err, stats) {
            // ...
          });

Configuration (Concepts):
  Поскольку webpack.config.js - это стандартный модуль Node.js CommonJS, вы можете делать следующее:
    1. Импортируйте другие файлы с помощью require(...)
    2. использовать утилиты на npm через require(...)
    3. использовать выражения потока управления JavaScript, например, оператор ?:
    4. использовать константы или переменные для часто используемых значений
    5. писать и выполнять функции для генерации части конфигурации

  Используйте эти функции, когда это необходимо.
  Хотя они технически возможны, следует избегать следующих действий:
    1. Записывать длинные конфигурации (вместо этого разбивайте конфигурацию на несколько файлов)
      ;(Я НЕ ПОНЯЛ :)
    2. Экспортировать недетерминированные значения (двойной вызов webpack должен приводить к одинаковым выходным файлам)
      output: {
        filename: `[name].[${Date.now()}].js`,
      },
    3. Доступ к аргументам CLI при использовании webpack CLI (вместо этого напишите свой собственный CLI или используйте --env)
      ;(Это означает, что вы не должны использовать аргументы командной строки в своем Webpack конфигурационном файле, если вы используете Webpack CLI.)

Configuration (Configuration):
  Из коробки webpack не потребует от вас использования конфигурационного файла.
  Однако он будет считать, что entry point в ваш проект - src/index.js, и выведет результат в dist/main.js, минифицированный и оптимизированный для производства.

  Use a different configuration file:
    Если по какой-то причине вы хотите использовать другой конфигурационный файл в зависимости от определенных ситуаций,
    вы можете изменить его через командную строку с помощью флага --config.
    package.json
      "scripts": {
        "build": "webpack --config prod.config.js"
      }

Configuration Languages (Configuration):
  Configuration Languages:
    Webpack принимает файлы конфигурации, написанные на различных языках программирования и данных

    Список поддерживаемых расширений файлов можно найти в пакете node-interpret.

Configuration Types (Configuration):
  Помимо экспорта одного объекта конфигурации, есть еще несколько способов, которые позволяют решить и другие задачи.

  Exporting a Function:
    Со временем вы столкнетесь с необходимостью разграничить в файле webpack.config.js "builds" development и production.

    Один из вариантов - экспортировать функцию из конфигурации webpack вместо экспорта объекта.
    Функция будет вызываться с двумя аргументами:
      1. An environment as the first parameter.
      2. Карта опций (argv) в качестве второго параметра. Она описывает опции, передаваемые webpack, с такими ключами, как output-path и mode.

      module.exports = function(env, argv) {
        return {
          mode: env.production ? 'production' : 'development',
          devtool: env.production ? 'source-map' : 'eval',
          plugins: [
            new TerserPlugin({
              terserOptions: {
                compress: argv.mode === 'production' // only if `--mode production` was passed
              }
            })
          ]
        };
      };

  Exporting a Promise:
    Webpack запустит функцию, экспортированную из файла конфигурации, и будет ждать возвращения Promise.
    Удобно, когда нужно асинхронно загрузить переменные конфигурации.
      module.exports = () => {
        return new Promise((resolve, reject) => {
          setTimeout(() => {
            resolve({
              entry: './app.js',
              /* ... */
            });
          }, 5000);
        });
      };

  Exporting multiple configurations:
    Вместо экспорта одного объекта/функции конфигурации вы можете экспортировать несколько конфигураций (webpack 3.1.0).
    При запуске webpack все конфигурации будут собраны.
      module.exports = [
        {
          output: {
            filename: './dist-amd.js',
            libraryTarget: 'amd',
          },
          name: 'amd',
          entry: './app.js',
          mode: 'production',
        },
        {
          output: {
            filename: './dist-commonjs.js',
            libraryTarget: 'commonjs',
          },
          name: 'commonjs',
          entry: './app.js',
          mode: 'production',
        },
      ];

    "ВАЖНО!":
      Если вы передадите имя во флаге --config-name, webpack будет собирать только эту конкретную конфигурацию.

    dependencies:
      Если у вас есть конфигурация, которая зависит от вывода другой конфигурации, вы можете указать список зависимостей с помощью массива dependencies.
        module.exports = [
          {
            name: 'client',
            target: 'web',
            // …
          },
          {
            name: 'server',
            target: 'node',
            dependencies: ['client'],
          },
        ];

    parallelism:
      В случае экспорта нескольких конфигураций вы можете использовать параметр parallelism в массиве конфигураций, чтобы указать максимальное количество компиляторов,
      которые будут компилировать параллельно.
        module.exports = [
          {
            //config-1
          },
          {
            //config-2
          },
        ];
        module.exports.parallelism = 1;

Module:
  При модульном программировании разработчики разбивают программы на отдельные фрагменты функциональности, называемые "modules".

  What is a webpack Module:
    В отличие от modules Node.js, модули webpack могут выражать свои зависимости различными способами. Вот несколько примеров:
      1. An ES2015 import statement
      2. A CommonJS require() statement
      3. An AMD define and require statement
      4. An @import statement inside of a css/sass/less file.
      5. An image url in a stylesheet url(...) or HTML <img src=...> file.

  Supported Module Types
    Webpack поддерживает следующие типы modules:
      1. ECMAScript modules
      2. CommonJS modules
      3. AMD modules
      4. Assets
      5. WebAssembly modules

    Кроме того, webpack поддерживает modules, написанные на различных языках и препроцессорах, с помощью "loaders".

Module Resolution:
  "Resolver" - это библиотека, которая помогает найти module по его абсолютному пути. Module может быть востребован как зависимость от другого module, например:
    import foo from 'path/to/module';
    // or
    require('path/to/module');

  Зависимый module может быть как из кода приложения, так и из сторонней библиотеки.
  Resolver помогает webpack найти код модуля, который должен быть включен в бандл для каждого такого оператора require/import.
  webpack использует enhanced-resolve для разрешения путей к файлам во время bundling modules.

  Resolving rules in webpack:
    Используя enhanced-resolve, webpack может разрешать три вида путей к файлам:
    Absolute paths:
      import '/home/me/file';
      import 'C:\\Users\\me\\file';
    Relative paths:
      import '../src/file1';
      import './file2';
    Module paths:
      import 'module';
      import 'module/lib/file';

      "НЕДОЧИТАЛ: https://webpack.js.org/concepts/module-resolution/#module-paths"

  Resolving Loaders:
    Это происходит по тем же правилам, что и при разрешении файлов.
    Но с помощью параметра resolveLoader можно установить отдельные правила разрешения для loaders.

  Caching:
    Каждое обращение к файловой системе кэшируется, чтобы несколько параллельных или последовательных запросов к одному и тому же файлу выполнялись быстрее.
    В режиме watch из кэша удаляются только измененные файлы. Если режим watch выключен, то кэш очищается перед каждой компиляцией.

Module Federation:
  https://webpack.js.org/concepts/module-federation/

Dependency Graph:
  Каждый раз, когда один файл зависит от другого, webpack рассматривает это как "dependencies".
  Когда webpack обрабатывает ваше приложение, он начинает работу со списка modules, заданного в командной строке или в конфигурационном файле.
  Начиная с этих entry point, webpack рекурсивно строит dependencies graph, включающий каждый модуль, необходимый вашему приложению, а затем собирает все эти модули в небольшое количество пакетов - часто всего один - для загрузки браузером.

  "ВАЖНО!":
    Пакетирование приложения особенно эффективно для клиентов HTTP/1.1, так как оно минимизирует количество раз,
    когда вашему приложению приходится ждать, пока браузер начнет новый запрос.
    Для HTTP/2 вы также можете использовать разделение кода для достижения наилучших результатов.

Targets:
  Поскольку JavaScript может быть написан как для сервера, так и для браузера, webpack предлагает несколько targets развертывания,
  которые вы можете задать в конфигурации webpack.

  "ВАЖНО!":
    Свойство webpack target не следует путать со свойством output.libraryTarget.

  Usage:
    Чтобы установить свойство target, вы задаете значение target в конфигурации webpack:
      module.exports = {
        target: 'node',
      };
    В примере выше, используя node, webpack скомпилирует модуль для использования в Node.js-подобном окружении
    Каждая target имеет множество специфических для развертывания/окружения дополнений и поддержки, чтобы соответствовать своим потребностям.

The Manifest:
  В типичном приложении или сайте, созданном с помощью webpack, есть три основных типа кода:
    1. "Source Code", написанный вами и, возможно, вашей командой.
    2. Любые сторонние библиотеки или "Vendor" код, от которого зависит ваш исходный код.
    3. webpack runtime и "manifest", который управляет взаимодействием всех модулей.

  В этой статье мы сосредоточимся на последней из этих трех частей: runtime и, в частности, manifest.

  Runtime:
    "Runtime" вместе с данными "manifest" - это весь код, необходимый webpack для соединения вашего модульного приложения во время его работы в браузере.
    Он содержит логику загрузки и resolve, необходимую для соединения модулей при их взаимодействии.
    Это включает в себя подключение modules, которые уже были загружены в браузер, а также логику для "ленивой" загрузки тех, которые еще не были загружены.

  Manifest:
    Как только ваше приложение попадает в браузер в виде файла index.html, некоторые package и множество других активов,
    необходимых вашему приложению, должны быть каким-то образом загружены и связаны.
    Каталог /src, который вы тщательно прокладывали, теперь собран, минифицирован и, возможно,
    даже разбит на более мелкие chunks для ленивой загрузки с помощью оптимизации webpack.
    Как же webpack управляет взаимодействием между всеми необходимыми modules? Здесь на помощь приходят данные manifest...

    По мере того как компилятор вводит, решает и составляет карту вашего приложения, он ведет подробные записи обо всех ваших модулях.
    Этот набор данных называется "manifest", и именно его будет использовать среда выполнения для разрешения и загрузки модулей после того,
    как они будут скомпонованы и отправлены в браузер.
    Независимо от того, какой синтаксис модуля вы выбрали, утверждения import или require теперь превратились в методы __webpack_require__,
    которые указывают на идентификаторы модулей.
    Используя данные из manifest, среда выполнения сможет найти, где получить модули, скрывающиеся за идентификаторами.

  The Problem:
    Итак, теперь у вас есть небольшое представление о том, как webpack работает за кулисами. "Но как это влияет на меня?" - спросите вы. В большинстве случаев никак.
    Однако если вы решите повысить производительность своих проектов за счет использования браузерного кэширования, этот процесс вдруг станет очень важным для понимания.

    Используя хэши содержимого в именах файлов пакета, вы можете указать браузеру, когда содержимое файла изменилось, тем самым аннулировав кэш.
    Однако как только вы начнете это делать, вы сразу же заметите забавное поведение.
    Некоторые хэши меняются даже тогда, когда их содержимое, очевидно, не меняется.
    Это вызвано внедрением среды выполнения и манифеста, которые меняются при каждой сборке.

Hot Module Replacement:
  https://webpack.js.org/concepts/hot-module-replacement/

Under The Hood:
  https://webpack.js.org/concepts/under-the-hood/





Вопросы:
  1. dependOn, import, library, runtime, publicPath - use cases
  2. Entry points Scenarios
  3. CommonsChunkPlugin
  4. preLoaders, loaders, postLoaders
  5. !, !!, ~! в loaders
  6. Записывать длинные конфигурации (вместо этого разбивайте конфигурацию на несколько файлов) - что это значит?
  7. Promise config (Exporting a Promise) - use cases
  8. Multiple config (Exporting multiple configurations) - use cases
  9. parallelism - use cases
  10. Micro-Frontend
  11. Module Federation
  12. HTTP/1.1, HTTP/2
  13. Manifest optimization (The Manifest - The Problem)

1. multi-main entry - ???
2. Single Entry Syntax - ???
3. Scalable webpack configurations - ???
4. chunk runtime - ???
5. substitutions - ???
6. source code
7. Plugins
8. Builds
9. modules
10. loaders
11. Resolver
12. bundling modules
13. local module
14. remove module
15. Targets (webpack)
16. Source Code
17. Vendor Code
18. Manifest
19. Hot module Replacement